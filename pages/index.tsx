import Head from "next/head";
import { Inter } from "@next/font/google";
import { USER_COUNT } from "../queries/demo-query";
import useClientQuery from "../graphql/useClientQuery";
import { useContext, useEffect, useMemo, useState } from "react";
import axios from "axios";
import StartPageComponent from "../containers/start-page/Start-page.component";
import LoaderComponent from "../components/loader/Loader.component";
import { GET_AUTHORIZED, SET_AUTHORIZED } from "../graphql/resolvers";
import { useMutation } from "@apollo/client";
import { PROFILE_DETAILS } from "../queries/start-page-query";
import { IS_AUTHORIZED } from "../queries/login-query";
import { AuthContext } from "./_app";

const inter = Inter({ subsets: ["latin"] });

export default function Home(props: any) {
  // const [userCounts, setUserCounts] = useState<number>(0);
  const [randomImg, setRandomImg] = useState<any>("");
  const [randomDate, setRandomDate] = useState<string>("");
  const userCount = useClientQuery(USER_COUNT);
  const profileDetails = useClientQuery(PROFILE_DETAILS);
  const { loading, data } = useClientQuery(IS_AUTHORIZED, {
    errorPolicy: "all",
  });

  const authBoolean = useContext<any>(AuthContext);

  useEffect(() => {
    if (userCount.data !== undefined) {
      if (typeof data?.isAuthorizedUser !== "undefined") {
        authBoolean(data?.isAuthorizedUser);
      }
      axios
        .get(
          "https://images.pexels.com/photos/1562058/pexels-photo-1562058.jpeg?cs=srgb&dl=pexels-tobias-bj%C3%B8rkli-1562058.jpg&fm=jpg&w=3000&h=4000&_gl=1*zir1p1*_ga*MTI5NDk2OTY1MC4xNjgxODA2NTkw*_ga_8JE65Q40S6*MTY4MTgwNjU5MS4xLjEuMTY4MTgwNjYwMy4wLjAuMA..",
          {
            responseType: "blob",
          }
        )
        .then((res: any) => {
          var reader = new window.FileReader();
          reader.readAsDataURL(res.data);
          reader.onload = function (event: any) {
            var imageDataUrl = event.target.result;
            setRandomImg(imageDataUrl);
            // setRandomImg("");
          };
        });
    }
  }, [userCount, props, data]);

  const userCounts = useMemo(() => {
    if (userCount.data !== undefined) {
      return userCount.data.userCount.count;
    }
  }, [userCount]);

  const profileDetail = useMemo(() => {
    if (typeof profileDetails.data !== "undefined") {
      return profileDetails.data.profileDetails;
    }
  }, [profileDetails]);

  const isAuthorizedUser = useMemo(() => {
    if (typeof data !== "undefined") {
      return data?.isAuthorizedUser;
    }
  }, [data]);

  return (
    <>
      <Head>
        <title>Nebula Events</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {randomImg.length > 0 ? (
          <StartPageComponent
            userCount={userCounts}
            randomImage={randomImg}
            profileDetail={profileDetail}
            isAuthorizedUser={isAuthorizedUser}
          />
        ) : (
          <LoaderComponent />
        )}
      </main>
    </>
  );
}
